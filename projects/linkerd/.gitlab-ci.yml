stages:
  - build
  - package
  - Cross-Cloud
  - Cross-Project

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)

compile:
  image: openjdk:8
  stage: build
  # cache:
  #   paths:
  #   - docker-17.03.0-ce.tgz
  #   - node-v6.10.2-linux-x64.tar.xz

  variables:
    CI_TERRIBLENESS: 30.seconds

  script:
    - set -x
    - if [ ! -f docker-17.03.0-ce.tgz ]; then
          curl -sLO https://get.docker.com/builds/Linux/x86_64/docker-17.03.0-ce.tgz ;
        fi
    - tar -xz -C /tmp -f docker-17.03.0-ce.tgz
    - mv /tmp/docker/* /usr/bin
    - if [ ! -f node-v6.10.2-linux-x64.tar.xz ]; then
          curl -sLO https://nodejs.org/dist/v6.10.2/node-v6.10.2-linux-x64.tar.xz ;
        fi
    - tar -xf node-v6.10.2-linux-x64.tar.xz
    - cp -a node-v6.10.2-linux-x64/* /usr/
    - sh -x ci/update.sh
    - set -x
    - echo "Install Node.js and npm dependencies"
    - pushd $(pwd)/admin/src/main/resources/io/buoyant/admin/ ; npm install ; popd
    - echo "Run npm tests"
    - pushd $(pwd)/admin/src/main/resources/io/buoyant/admin/ ;  npm run eslint ; npm test ; popd 
    - echo "Run unit and e2e tests"
    - sh -x ci/test.sh 
    - set -x ci/coverage-publish.sh || true
    - echo "Publish"
    # - DOCKER_TARGET="dockerBuildAndPush"
    - DOCKER_TARGET="docker"
    # - ./sbt "set Base.dockerTag in (linkerd, Bundle) := \"${IMAGE_TAG}\"" "linkerd/bundle:${DOCKER_TARGET}" \
            # "set Base.dockerTag in (namerd, Bundle) := \"${IMAGE_TAG}\"" "namerd/bundle:${DOCKER_TARGET}" \
            # "set Base.dockerTag in (namerd, Dcos) := \"dcos-${IMAGE_TAG}\"" "namerd/dcos:${DOCKER_TARGET}"
    - ./sbt 'set imageNames in docker in (linkerd, Bundle) += ImageName("registry.staging.cncf.ci/linkerd/linkerd/linkerd:1.3.1")' \ "linkerd/docker"
    - ./sbt 'set imageNames in docker in (namerd, Bundle) += ImageName("registry.staging.cncf.ci/linkerd/linkerd/namerd:1.3.1")' \ "namerd/docker"
    - ./sbt 'set imageNames in docker in (namerd, Dcos) += ImageName("registry.staging.cncf.ci/linkerd/linkerd/namerd-dcos:1.3.1")' \ "namerd/dcos:docker"

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 4 weeks
    paths:
      - "admin/src/main/resources/io/buoyant/admin/node_modules"

container:
  stage: package
  script:
    - IMAGE_TAG=${CI_COMMIT_SHA_SHORT}
    - docker tag registry.staging.cncf.ci/linkerd/linkerd/linkerd:1.3.1 registry.staging.cncf.ci/linkerd/linkerd/linkerd:"$IMAGE_TAG"
    - docker tag registry.staging.cncf.ci/linkerd/linkerd/namerd:1.3.1 registry.staging.cncf.ci/linkerd/linkerd/namerd:"$IMAGE_TAG"
    - docker tag registry.staging.cncf.ci/linkerd/linkerd/namerd-dcos:1.3.1 registry.staging.cncf.ci/linkerd/linkerd/namerd-dcos:"$IMAGE_TAG"
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push registry.staging.cncf.ci/linkerd/linkerd/linkerd:"$IMAGE_TAG"
    - docker push registry.staging.cncf.ci/linkerd/linkerd/namerd:"$IMAGE_TAG"
    - docker push registry.staging.cncf.ci/linkerd/linkerd/namerd-dcos:"$IMAGE_TAG"
    - touch release.env
    - echo "export IMAGE=registry.staging.cncf.ci/linkerd/linkerd/linkerd" | tee release.env
    - echo "export TAG=$IMAGE_TAG" | tee release.env
    # - echo "registry.staging.cncf.ci/linkerd/linkerd/namerd:${IMAGE_TAG}" >> release.env
    # - echo "registry.staging.cncf.ci/linkerd/linkerd/namerd:-dcos-${IMAGE_TAG}" > release.env
    - cat release.env

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 4 weeks
    paths:
      - "release.env"

# Deploy Template used for Cross-Cloud API Call
.cross-cloud: &cross-cloud
  allow_failure: false
  image: buildpack-deps:stretch
  stage: Cross-Cloud
  # variables:
  #   KUBERNETES_BRANCH: MUST BE SET
  #   CLOUD: MUST BE SET
  script:
    - >
      if [ "$BUILD_TRIGGER" == "yes" ]; then
        exit 0
      else
        apt update && apt install -y jq
        PROJECT_PIPELINE=$(curl -X POST -F token=$CROSS_CLOUD_CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations -F "variables[BRANCH]="${CLOUD_BRANCH}"" -F "variables[COMMIT]="${CLOUD_COMMIT}"" -F "variables[SOURCE]="${CI_PIPELINE_ID}"" -F "variables[DISABLE_SOURCE]="${CLOUD_DISABLE_SOURCE}"" -F "variables[ORG]=kubernetes" -F "variables[PROJECT]=kubernetes" -F "variables[PROJECT_ID]=14" -F "variables[PROJECT_TOKEN]="${KUBERNETES_PROJECT_TOKEN}"" -F "variables[CLOUD]="${CLOUD}"" "$BASE_URL"/api/v4/projects/2/trigger/pipeline | jq '.id')
        # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')

        echo 'Wait for Cluster "FIX ME / HACK"'
        until [ "$JOB_STATUS" == '"success"' ]; do
            JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs" | jq '.[] | select(.name=="Kubernetes-Deploy") | .status')"
            sleep 0.5
            if [ "$JOB_STATUS" == '"failed"' ]; then
                exit 1
            elif [ "$JOB_STATUS" == '"canceled"' ]; then
                exit 1
            else
                continue
            fi
        done
        echo 'Cluster Ready'

        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Kubernetes-Deploy") | .id')

        export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
        curl -s -o kubeconfig -L "$BASE_URL/cncf/cross-cloud/-/jobs/${PROJECT_JOB}/artifacts/raw/data/$CLOUD/kubeconfig"
        cat ./kubeconfig | base64 | tee ./kubeconfig

      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - kubeconfig

# Deploy Template used for Cross-Project API Call
.cross-project: &cross-project
  allow_failure: false
  image: buildpack-deps:stretch
  stage: Cross-Project
  # variables:
    # COREDNS_BRANCH: CAN BE SET
    # COREDNS_COMMIT: CAN BE SET
    # CLOUD: MUST BE SET
  script:
    - >
      if [ "$BUILD_TRIGGER" == "yes" ]; then
        exit 0
      else
        echo 'Trigger Cross-Project'
        apt update && apt install -y jq
        KUBECONFIG=$(cat ./kubeconfig | tr -d '\n')
        PROJECT_PIPELINE=$(curl -X POST -F token=$CROSS_PROJECT_CI_JOB_TOKEN -F ref=multi-project -F "variables[BRANCH]="${PROJECT_BRANCH}"" -F "variables[COMMIT]="${PROJECT_COMMIT}"" -F "variables[SOURCE]="${CI_PIPELINE_ID}"" -F "variables[DISABLE_SOURCE]="${PROJECT_DISABLE_SOURCE}"" -F "variables[KUBECONFIG]="${KUBECONFIG}"" -F "variables[ORG]="${CI_PROJECT_NAMESPACE}"" -F "variables[PROJECT]="${CI_PROJECT_NAME}"" -F "variables[PROJECT_ID]="${CI_PROJECT_ID}"" -F "variables[PROJECT_TOKEN]="${LINKERD_PROJECT_TOKEN}"" -F "variables[IMAGE_ARGS]=image.repository" -F "variables[TAG_ARGS]=image.tag" -F "variables[LABEL_ARGS]=-l k8s-app=linkerd" -F "variables[FILTER]=.items[0].spec.containers[0].image" -F "variables[CHART]=linkerd" -F "variables[NAME]=linkerd" -F "variables[CHART_REPO]=stable" "$BASE_URL"/api/v4/projects/45/trigger/pipeline | jq '.id')
        # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=master https://gitlab.cncf.ci/api/v4/projects/45/trigger/pipeline | jq '.id')

        echo 'Verify Project Deployment'

        until [ "$JOB_STATUS" == '"success"' ]; do
            JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/45/pipelines/${PROJECT_PIPELINE}/jobs" | jq '.[] | select(.name=="Cross-Project") | .status')"
            sleep 0.5
            if [ "$JOB_STATUS" == '"failed"' ]; then
                exit 1
            elif [ "$JOB_STATUS" == '"canceled"' ]; then
                exit 1
            else
                continue
            fi
        done
        echo 'Deployment Successful'
      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - kubeconfig


Cross-Cloud:
  <<: *cross-cloud

Cross-Project:
  <<: *cross-project
