stages:
  - coredns-build-branch
  - coredns-deploy

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done

coredns-build-branch:
  image: buildpack-deps:stretch
  stage: coredns-build-branch
  script:
    - apt update && apt -y install jq
    - echo "$COREDNS_BRANCH"
    - >
      if [ -z "${COREDNS_BRANCH}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo "Checking for Latest Build"
        curl -s -L -o data/coredns.url "${BASE_URL}/coredns/coredns/builds/artifacts/${COREDNS_BRANCH}/file/release.env?job=container"
        if cat data/coredns.url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw ; then
        COREDNS_RELEASE_ENV=$(cat data/coredns.url | sed -n 's/.*href="\([^"]*\).*/\1/p' | grep artifacts/raw | tail -1)
        curl -o data/coredns.env -L ${BASE_URL}/$COREDNS_RELEASE_ENV
        cat data/coredns.env
        else
          PROJECT_PIPELINE=$(curl -X POST -F token=$CORE_DNS_CI_JOB_TOKEN -F ref=${COREDNS_BRANCH} -F "variables[BUILD_TRIGGER]=yes" https://gitlab.cncf.ci/api/v4/projects/9/trigger/pipeline | jq '.id')
          echo 'Wait for Build "FIX ME / HACK"'
          until [ "$JOB_STATUS" == '"success"' ]; do JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/9/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .status')" ; sleep 0.5 ; done ; echo 'Build Compleate'
          PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/9/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id') 
          curl -s -o data/coredns.env -L "$BASE_URL/coredns/coredns/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
          cat data/coredns.env
        fi
      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

aws-coredns-deploy:
  image: registry.cncf.ci/cncf/cross-cloud/provisioning:ci-stable-v0-2-0
  stage: coredns-deploy
  script:
    - >
      if [ -z "$AWS_KUBECONFIG" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo 'deploy'
      fi
    - echo "${AWS_KUBECONFIG}" | base64 -d | tee ./aws-kubeconfig
    - export KUBECONFIG=./aws-kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep COREDNS
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - kubectl get svc --namespace=kube-system -l name=coredns
    - kubectl get pods --namespace=kube-system -l name=kube-dns
    - helm repo add cncf http://cncf.gitlab.io/stable
    - COREDNS_INSTALL="helm install --name coredns
         --namespace=kube-system
         --set middleware.kubernetes.clusterCidr=10.0.0.0/24
         --set middleware.kubernetes.clusterIP=10.0.0.10
         --set middleware.prometheus.enabled=false
         --set middleware.errors.enabled=true
         --set middleware.log.enabled=true 
         --set middleware.loadbalance.enabled=false
         --set middleware.test.enabled=false
         --set image.repository=${COREDNS_IMAGE}
         --set image.tag=${COREDNS_TAG}
         cncf/coredns"
    - echo $COREDNS_INSTALL ; $COREDNS_INSTALL
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods --namespace=kube-system -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - kubectl get svc --namespace=kube-system -l k8s-app=coredns
    - kubectl get pods --namespace=kube-system -l k8s-app=coredns
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

gke-coredns-deploy:
  image: registry.cncf.ci/cncf/cross-cloud/provisioning:ci-stable-v0-2-0
  stage: coredns-deploy
  script:
    - >
      if [ -z "$GKE_KUBECONFIG" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo 'deploy'
      fi
    - echo "${GKE_KUBECONFIG}" | base64 -d | tee ./gke-kubeconfig
    - export KUBECONFIG=./gke-kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep COREDNS
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - kubectl get svc --namespace=kube-system -l name=coredns
    - kubectl get pods --namespace=kube-system -l name=kube-dns
    - helm repo add cncf http://cncf.gitlab.io/stable
    - COREDNS_INSTALL="helm install --name coredns
         --namespace=kube-system
         --set middleware.kubernetes.clusterCidr=10.0.0.0/24
         --set middleware.kubernetes.clusterIP=10.0.0.10
         --set middleware.prometheus.enabled=false
         --set middleware.errors.enabled=true
         --set middleware.log.enabled=true 
         --set middleware.loadbalance.enabled=false
         --set middleware.test.enabled=false
         --set image.repository=${COREDNS_IMAGE}
         --set image.tag=${COREDNS_TAG}
         cncf/coredns"
    - echo $COREDNS_INSTALL ; $COREDNS_INSTALL
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods --namespace=kube-system -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - kubectl get svc --namespace=kube-system -l k8s-app=coredns
    - kubectl get pods --namespace=kube-system -l k8s-app=coredns
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

gce-coredns-deploy:
  image: registry.cncf.ci/cncf/cross-cloud/provisioning:ci-stable-v0-2-0
  stage: coredns-deploy
  script:
    - >
      if [ -z "$GCE_KUBECONFIG" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo 'deploy'
      fi 
    - echo "${GCE_KUBECONFIG}" | base64 -d | tee ./gce-kubeconfig
    - export KUBECONFIG=./gce-kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep COREDNS
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - kubectl get svc --namespace=kube-system -l name=coredns
    - kubectl get pods --namespace=kube-system -l name=kube-dns
    - helm repo add cncf http://cncf.gitlab.io/stable
    - COREDNS_INSTALL="helm install --name coredns
         --namespace=kube-system
         --set middleware.kubernetes.clusterCidr=10.0.0.0/24
         --set middleware.kubernetes.clusterIP=10.0.0.10
         --set middleware.prometheus.enabled=false
         --set middleware.errors.enabled=true
         --set middleware.log.enabled=true 
         --set middleware.loadbalance.enabled=false
         --set middleware.test.enabled=false
         --set image.repository=${COREDNS_IMAGE}
         --set image.tag=${COREDNS_TAG}
         cncf/coredns"
    - echo $COREDNS_INSTALL ; $COREDNS_INSTALL
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods --namespace=kube-system -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - kubectl get svc --namespace=kube-system -l k8s-app=coredns
    - kubectl get pods --namespace=kube-system -l k8s-app=coredns
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

packet-coredns-deploy:
  image: registry.cncf.ci/cncf/cross-cloud/provisioning:ci-stable-v0-2-0
  stage: coredns-deploy
  script:
    - >
      if [ -z "$PACKET_KUBECONFIG" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        echo 'deploy'
      fi 
    - echo "${PACKET_KUBECONFIG}" | base64 -d | tee ./packet-kubeconfig
    - export KUBECONFIG=./packet-kubeconfig
    - kubectl get nodes
    - kubectl get componentstatuses
    - env | grep COREDNS
    - helm init
    - echo Removing any previous deploys of coredns
    - helm get coredns > /dev/null && helm delete --purge coredns
    - kubectl get svc --namespace=kube-system -l name=coredns
    - kubectl get pods --namespace=kube-system -l name=kube-dns
    - helm repo add cncf http://cncf.gitlab.io/stable
    - COREDNS_INSTALL="helm install --name coredns
         --namespace=kube-system
         --set middleware.kubernetes.clusterCidr=10.0.0.0/24
         --set middleware.kubernetes.clusterIP=10.0.0.10
         --set middleware.prometheus.enabled=false
         --set middleware.errors.enabled=true
         --set middleware.log.enabled=true 
         --set middleware.loadbalance.enabled=false
         --set middleware.test.enabled=false
         --set image.repository=${COREDNS_IMAGE}
         --set image.tag=${COREDNS_TAG}
         cncf/coredns"
    - echo $COREDNS_INSTALL ; $COREDNS_INSTALL
    - DEPLOYED_COREDNS_IMAGE=$(kubectl get pods --namespace=kube-system -l k8s-app=coredns -o jsonpath="{.items[0].spec.containers[0].image}")
    - echo Deployed CoreDNS Image - $DEPLOYED_COREDNS_IMAGE
    - kubectl get svc --namespace=kube-system -l k8s-app=coredns
    - kubectl get pods --namespace=kube-system -l k8s-app=coredns
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

